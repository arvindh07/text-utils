{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","trim","data-bs-whatever","tabIndex","aria-labelledby","aria-hidden","data-bs-dismiss","for_word","document","getElementById","replace_word","replace","length","Alert","alert","word","lower","slice","capitalizeFirst","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","abtTitle","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"mMAIe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCL,EAAMM,KAA1C,QAAAD,OAAqDL,EAAMM,OACvEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAKP,EAAMQ,OAC5CP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC1Lb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAxD,UAMJN,EAAAC,EAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAA8C,UAAbL,EAAMM,KAAiB,OAAS,UAC/EL,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBa,QAASjB,EAAMkB,WAAYT,KAAK,WAAWU,KAAK,SAASC,eAAa,OAAOL,GAAG,2BACpHd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBiB,QAAQ,0BAA5C,wBCrBK,SAASC,EAAStB,GAAO,IAAAuB,EACZC,mBAAS,IADGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC7BK,EAD6BH,EAAA,GACvBI,EADuBJ,EAAA,GA0CpC,OACIxB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4B,SAAA,KACA7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiB2B,MAAO,CAACC,MAAmB,SAAbhC,EAAMM,KAAgB,QAAQ,UACxEL,EAAAC,EAAAC,cAAA,UAAKH,EAAMiC,SACXhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAe2B,MAAO,CAACG,gBAAgC,SAAflC,EAAMM,KAAkB,iBAAiB,QACjG0B,MAAqB,SAAfhC,EAAMM,KAAkB,QAAU,SAAW6B,MAAOP,EAAMQ,SAnBzD,SAACC,GAEpBR,EAAQQ,EAAMC,OAAOH,QAiBiFpB,GAAG,QAAQwB,KAAK,OAElHtC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4Ba,QAhDhC,WAElB,IAAIuB,EAAUZ,EAAKa,cACnBZ,EAAQW,GACRxC,EAAM0C,UAAU,UAAU,4BA4CtB,gBACAzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4Ba,QA3ChC,WAElB,IAAIuB,EAAUZ,EAAKe,cACnBd,EAAQW,GACRxC,EAAM0C,UAAU,UAAU,4BAuCtB,gBACAzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4Ba,QAtC9B,WAGpBY,EADc,IAEd7B,EAAM0C,UAAU,UAAU,kBAkCtB,cACAzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4Ba,QAnB9B,WAEpB,IAAIuB,EAAUZ,EAAKgB,MAAM,QACzBf,EAAQW,EAAQK,KAAK,KAAKC,QAC1B9C,EAAM0C,UAAU,UAAU,yBAetB,uBACAzC,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,uBAAuBM,iBAAe,QAAQC,iBAAe,gBAAgBoC,mBAAiB,QAA9H,gBAEA9C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaW,GAAG,eAAeiC,SAAS,KAAKC,kBAAgB,oBAAoBC,cAAY,QACxGjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcW,GAAG,qBAA/B,iBACAd,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,YAAY+C,kBAAgB,QAAQrC,aAAW,WAEnFb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAOkB,QAAQ,iBAAiBjB,UAAU,kBAA1C,iBACAH,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOL,UAAU,eAAeW,GAAG,cAEnDd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAOkB,QAAQ,eAAejB,UAAU,kBAAxC,kBACAH,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOL,UAAU,eAAeW,GAAG,oBAI3Dd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASL,UAAU,oBAAoB+C,kBAAgB,SAApE,SACAlD,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASQ,QA1DxB,WAEtB,IAAImC,EAAWC,SAASC,eAAe,YAAYnB,MAC/CoB,EAAeF,SAASC,eAAe,gBAAgBnB,MACvDK,EAAUZ,EAAK4B,QAAQJ,EAASG,GACpC1B,EAAQW,GACRxC,EAAM0C,UAAU,UAAU,kBAoDgDtC,UAAU,kBAAkB+C,kBAAgB,SAA9F,iBAOxBlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiB2B,MAAO,CAACC,MAAqB,SAAdhC,EAAMM,KAAiB,QAAU,UAC5EL,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SAAIyB,EAAK6B,OAAS,EAAI7B,EAAKgB,MAAM,KAAKa,OAAQ,EAA9C,cAA4D7B,EAAK6B,OAAjE,eACAxD,EAAAC,EAAAC,cAAA,yBAAiB,KAAQyB,EAAK6B,OAA9B,gBACAxD,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIyB,EAAK6B,OAAO,EAAI7B,EAAO,sCC1FxB,SAAS8B,EAAM1D,GAK5B,OACEA,EAAM2D,OAAS1D,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBL,EAAM2D,MAAMlD,KAA7B,gCAAiEU,KAAK,SAC/FlB,EAAAC,EAAAC,cAAA,cANoB,SAACyD,GACrB,IAAIC,EAAQD,EAAKjB,cACjB,OAAOkB,EAAM,GAAGpB,cAAgBoB,EAAMC,MAAM,GAInCC,CAAgB/D,EAAM2D,MAAMlD,MAArC,MAAuDT,EAAM2D,MAAMK,KC0D5DC,MA1Df,WAAe,IAAA1C,EACWC,mBAAS,SADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNjB,EADMmB,EAAA,GACAyC,EADAzC,EAAA,GAAA0C,EAEa3C,mBAAS,MAFtB4C,EAAA1C,OAAAC,EAAA,EAAAD,CAAAyC,EAAA,GAENR,EAFMS,EAAA,GAECC,EAFDD,EAAA,GAIP1B,EAAY,SAACjC,EAAM6D,GACvBD,EAAS,CACPL,IAAKM,EACL7D,KAAMA,IAGR8D,WAAW,WACTF,EAAS,OACR,OAiBL,OACEpE,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4B,SAAA,KAEI7B,EAAAC,EAAAC,cAACJ,EAAD,CACES,MAAM,YACNgE,SAAS,WACTlE,KAAMA,EACNY,WArBW,WACJ,UAATZ,GACF4D,EAAQ,QACRb,SAASoB,KAAK1C,MAAMG,gBAAkB,UACtCQ,EAAU,UAAW,qBACrBW,SAAS7C,MAAQ,0BAEjB0D,EAAQ,SACRb,SAASoB,KAAK1C,MAAMG,gBAAkB,QACtCQ,EAAU,UAAW,sBACrBW,SAAS7C,MAAQ,6BAafP,EAAAC,EAAAC,cAACuD,EAAD,CAAOC,MAAOA,IACd1D,EAAAC,EAAAC,cAAA,WAKKF,EAAAC,EAAAC,cAACmB,EAAD,CACGW,QAAQ,qCACR3B,KAAMA,EACNoC,UAAWA,IARnB,OCpCOgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWnC,SAASC,eAAe,SACpDmC,OACHxF,EAAAC,EAAAC,cAACF,EAAAC,EAAMwF,WAAP,KACEzF,EAAAC,EAAAC,cAACwF,EAAD,QAOJjB","file":"static/js/main.c81ffa6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.abtTitle}</a>\r\n            </li> */}\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode===\"light\" ? \"dark\" : \"light\"}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" aria-checked=\"true\" id=\"flexSwitchCheckDefault\" />\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n          </form> */}\r\n        </div>\r\n        \r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  abtTitle: PropTypes.string.isRequired\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const handleUpClick = () => {\r\n        // console.log(\"clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"success\",\"Converted to Uppercase\");\r\n    };\r\n    const handleLoClick = () => {\r\n        // console.log(\"clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"success\",\"Converted to Lowercase\");\r\n    };\r\n    const handleClearText = () => {\r\n        // console.log(\"clicked\");\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"success\",\"Text Cleared\");\r\n    };\r\n    const handleReplaceText = () => {\r\n        // console.log(\"clicked\");\r\n        let for_word = document.getElementById(\"for_word\").value;\r\n        let replace_word = document.getElementById(\"replace_word\").value;\r\n        let newText = text.replace(for_word,replace_word);\r\n        setText(newText);\r\n        props.showAlert(\"success\",\"Text Replaced\");\r\n    };\r\n    \r\n    const handleOnChange = (event) => {\r\n        // console.log(\"typed\"+text);\r\n        setText(event.target.value);\r\n    };\r\n\r\n    const handleXtraSpace = () => {\r\n        // console.log(\"typed\"+text);\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \").trim());\r\n        props.showAlert(\"success\",\"Extra space removed\");\r\n        // setText(text.trim());\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <div className='container my-3' style={{color:props.mode===\"dark\" ? \"white\":\"black\"}}>\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" style={{backgroundColor: props.mode === \"dark\" ? \"rgb(80 80 177)\":\"white\",\r\n                    color:props.mode === \"dark\" ? \"white\" : \"black\" }} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"6\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary my-2 me-2\" onClick={handleUpClick}>To UpperCase</button>\r\n            <button className=\"btn btn-primary my-2 me-2\" onClick={handleLoClick}>To LowerCase</button>\r\n            <button className=\"btn btn-primary my-2 me-2\" onClick={handleClearText}>Clear Text</button>\r\n            <button className=\"btn btn-primary my-2 me-2\" onClick={handleXtraSpace}>Remove Extra Spaces</button>\r\n            <button type=\"button\" className=\"btn btn-primary me-2\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" data-bs-whatever=\"@mdo\">Replace Text</button>\r\n            {/* modal replace */}\r\n            <div>\r\n                <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Replace Words</h5>\r\n                                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <form>\r\n                                    <div className=\"mb-3\">\r\n                                        <label htmlFor=\"recipient-name\" className=\"col-form-label\">Replace For: </label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"for_word\" />\r\n                                    </div>\r\n                                    <div className=\"mb-3\">\r\n                                        <label htmlFor=\"message-text\" className=\"col-form-label\">Replace With: </label>\r\n                                        <input type=\"text\" className=\"form-control\" id=\"replace_word\" />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                                <button type=\"button\" onClick={handleReplaceText} className=\"btn btn-primary\" data-bs-dismiss=\"modal\">Replace</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode ===\"dark\" ? \"white\" : \"black\"}}>\r\n            <h3>Your words Summary</h3>\r\n            <p>{text.length > 0 ? text.split(\" \").length: 0} words and {text.length} characters</p>\r\n            <p>It will take {0.008 * text.length}mins to read</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0 ? text : \"Enter text in textbox to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalizeFirst = (word) => {\r\n        let lower = word.toLowerCase();\r\n        return lower[0].toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalizeFirst(props.alert.type)}: </strong>{props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","import \"./App.css\";\nimport React from \"react\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (type, message) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#262664\";\n      showAlert(\"success\", \"Dark Mode enabled\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"success\", \"Light Mode enabled\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar\n          title=\"TextUtils\"\n          abtTitle=\"About Us\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        <Alert alert={alert} />\n        <div>\n          {/* <Routes>\n            <Route exact path=\"/about\" element={<About />}> \n            </Route> */}\n            {/* <Route exact path=\"/\" element= */}\n            {<TextForm\n                heading=\"Enter your text below to transform\"\n                mode={mode}\n                showAlert={showAlert}\n              />}\n              >\n            {/* </Route>\n          </Routes> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}